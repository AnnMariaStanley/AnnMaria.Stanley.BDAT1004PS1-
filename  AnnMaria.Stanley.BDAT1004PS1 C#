{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e7c1099f",
   "metadata": {},
   "source": [
    "# problem set 1 : Data Programming BDAT1004\n",
    "\n",
    "# C#\n",
    "\n",
    "# ques 1\n",
    "\n",
    " AnnMaria.Stanley.BDAT1004PS1\n",
    "\n",
    "What data type is each of the following?\n",
    "    5 -         Integer \n",
    "    5.0 -       Float\n",
    "    5 > 1 -     Boolean\n",
    "    '5' -       Char\n",
    "    5 * 2 -     Integer\n",
    "    '5' * 2 -   String\n",
    "    '5' + '2' - String\n",
    "    5 / 2 -     Float\n",
    "    5 // 2 -    Integer\n",
    "    [5, 2, 1] -  Integer\n",
    "    5 in [1, 4, 6] - Boolean\n",
    "    Pi (the number) - Float"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a6803ba",
   "metadata": {},
   "source": [
    "# C#\n",
    "\n",
    "# ques 2\n",
    "AnnMaria.Stanley.BDAT1004PS1\n",
    "Write (and evaluate) C# expressions that answer these questions:\n",
    "\n",
    "    a. How many letters are there in 'Supercalifragilisticexpialidocious'?\n",
    "\n",
    "    b. Does 'Supercalifragilisticexpialidocious' contain 'ice' as a substring?\n",
    "\n",
    "    c. Which of the following words is the longest:\n",
    "        Supercalifragilisticexpialidocious, Honorificabilitudinitatibus, or\n",
    "        Bababadalgharaghtakamminarronnkonn?\n",
    "\n",
    "    d. Which composer comes first in the dictionary: 'Berlioz', 'Borodin', 'Brian',\n",
    "    'Bartok', 'Bellini', 'Buxtehude', 'Bernstein'. Which one comes last?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f422fce7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of letters in Supercalifragilisticexpialidocious is 34 \r\n"
     ]
    }
   ],
   "source": [
    "// ques 2.a\n",
    "string word = \"Supercalifragilisticexpialidocious\";\n",
    "Console.WriteLine ($\"The number of letters in {word} is {word.Length} \");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "03e92386",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Supercalifragilisticexpialidocious has ice as a substring\r\n"
     ]
    }
   ],
   "source": [
    "// ques 2.b\n",
    "string word = \"Supercalifragilisticexpialidocious\" ;  \n",
    "if (word.Contains(\"ice\"))\n",
    "    {\n",
    "    Console.WriteLine(word +\" has ice as a substring\");\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e7256b2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Supercalifragilisticexpialidocious and Bababadalgharaghtakamminarronnkonn are the longest words.\r\n"
     ]
    }
   ],
   "source": [
    "// ques 2.c\n",
    "String str1 = \"Supercalifragilisticexpialidocious\";\n",
    "String str2 = \"Honorificabilitudinitatibus\";\n",
    "String str3 = \"Bababadalgharaghtakamminarronnkonn\";\n",
    "int str1_length = str1.Length;\n",
    "int str2_length = str2.Length;\n",
    "int str3_length = str3.Length;\n",
    "\n",
    "while (str1_length > str2_length && str1_length > str3_length)\n",
    "{\n",
    "    Console.WriteLine(\"{0} is the longest word.\",str1);\n",
    "    break;\n",
    "}\n",
    "while (str2_length > str1_length && str2_length > str3_length)\n",
    "{\n",
    "    Console.WriteLine(\"{0} is the longest word.\", str2);\n",
    "    break;\n",
    "}\n",
    "while (str3_length > str1_length && str3_length > str2_length)\n",
    "{\n",
    "    Console.WriteLine(\"{0} is the longest word.\", str3);\n",
    "    break;\n",
    "}\n",
    "while (str1_length == str2_length)\n",
    "{\n",
    "    Console.WriteLine(\"{0} and {1} are the longest words.\", str1,str2);\n",
    "    break;\n",
    "}\n",
    "while (str2_length == str3_length)\n",
    "{\n",
    "    Console.WriteLine(\"{0} and {1} are the longest words.\", str2, str3);\n",
    "    break;\n",
    "}\n",
    "while (str1_length == str3_length)\n",
    "{\n",
    "    Console.WriteLine(\"{0} and {1} are the longest words.\", str1, str3);\n",
    "    break;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "31c11ece",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The first composer in the Dictionary is Bartok\n",
      "The Last composer in the Dictionary is Buxtehude\n"
     ]
    }
   ],
   "source": [
    "\n",
    "string[] dictionary = {\"Berlioz\", \"Borodin\", \"Brian\", \"Bartok\", \"Bellini\", \"Buxtehude\", \"Bernstein\"};\n",
    "Array.Sort(dictionary);  \n",
    "Console.WriteLine($\"The first composer in the Dictionary is {dictionary[0]}\");\n",
    "Array.Reverse(dictionary);\n",
    "Console.WriteLine($\"The Last composer in the Dictionary is {dictionary[0]}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a30f47db",
   "metadata": {},
   "source": [
    "# C#\n",
    "\n",
    "# ques 3\n",
    "AnnMaria.Stanley.BDAT1004PS1\n",
    "Implement function triangleArea(a,b,c) that takes as input the lengths of the 3\n",
    "sides of a triangle and returns the area of the triangle. By Heron's formula, the area\n",
    "of a triangle with side lengths a, b, and c is s(s - a)(s -b)(s -c), where\n",
    "\n",
    "s = (a+b+c)/2.\n",
    ">>> triangleArea(2,2,2)\n",
    "1.7320508075688772"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ac807566",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area of Triangle = 1.7320508075688772\r\n"
     ]
    }
   ],
   "source": [
    "public void triangleArea(double a, double b, double c)\n",
    "   {\n",
    "    \n",
    "    double s= (a+b+c)/2;\n",
    "    double ar = Math.Sqrt(s*(s-a)*(s-b)*(s-c));\n",
    "    Console.WriteLine(\"Area of Triangle = {0}\",ar);\n",
    "    \n",
    "    }\n",
    "triangleArea(2,2,2);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9929d7b",
   "metadata": {},
   "source": [
    "# C#\n",
    "\n",
    "# ques 4 \n",
    "AnnMaria.Stanley.BDAT1004PS1\n",
    "Write a program in C# Sharp to separate odd and even integers in separate arrays.\n",
    "Go to the editor\n",
    "\n",
    "Test Data :\n",
    "Input the number of elements to be stored in the array :5\n",
    "Input 5 elements in the array :\n",
    "element - 0 : 25\n",
    "element - 1 : 47\n",
    "element - 2 : 42\n",
    "element - 3 : 56\n",
    "element - 4 : 32\n",
    "\n",
    "Expected Output:\n",
    "The Even elements are:\n",
    "42 56 32\n",
    "The Odd elements are :\n",
    "25 47"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9ae38b28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Number of elements to be stored in the array: 5\n",
      "Input 5 elements in array: \n",
      "element-0: 25\n",
      "element-1: 47\n",
      "element-2: 42\n",
      "element-3: 56\n",
      "element-4: 32\n",
      "The Even elements are :\n",
      "42\n",
      "56\n",
      "32\n",
      "\n",
      "The Odd elements are:\n",
      "25\n",
      "47\n",
      "\n"
     ]
    }
   ],
   "source": [
    "int[] values ={25,47,42,56,32}; \n",
    "      int ArrayLength = 5;\n",
    "\n",
    "Console.WriteLine(\"The Number of elements to be stored in the array: {0}\",ArrayLength);\n",
    "Console.WriteLine(\"Input {0} elements in array: \",ArrayLength);\n",
    "for (int i =0;i<ArrayLength;i++)\n",
    "   {\n",
    "     Console.WriteLine(\"element-{0}: {1}\",i, values[i]);\n",
    "   }\n",
    "        string evennumbers =\"\"; \n",
    "        string oddnumbers =\"\"; \n",
    "        \n",
    "        foreach (var number in values)  \n",
    "        {  \n",
    "            if (number % 2 == 0)  \n",
    "            {evennumbers = evennumbers + number + \"\\n\";} \n",
    "            else { oddnumbers = oddnumbers + number + \"\\n\" ; } \n",
    "        }\n",
    "        \n",
    "    Console.WriteLine($\"The Even elements are :\");\n",
    "    Console.WriteLine($\"{evennumbers}\");\n",
    "    Console.WriteLine($\"The Odd elements are:\");\n",
    "    Console.WriteLine($\"{oddnumbers}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d24c6e3",
   "metadata": {},
   "source": [
    "# C#\n",
    "\n",
    "# ques 5\n",
    "AnnMaria.Stanley.BDAT1004PS1\n",
    "a. Write a function inside(x,y,x1,y1,x2,y2) that returns True or False\n",
    "depending on whether the point (x,y) lies in the rectangle with lower left\n",
    "corner (x1,y1) and upper right corner (x2,y2).\n",
    "\n",
    ">>> inside(1,1,0,0,2,3)\n",
    "\n",
    "True\n",
    "\n",
    ">>> inside(-1,-1,0,0,2,3)\n",
    "\n",
    "False\n",
    "\n",
    "b. Use function inside() from part a. to write an expression that tests whether\n",
    "the point (1,1) lies in both of the following rectangles: one with lower left\n",
    "corner (0.3, 0.5) and upper right corner (1.1, 0.7) and the other with lower\n",
    "left corner (0.5, 0.2) and upper right corner (1.1, 2). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e7145c36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inside(1,1,0,0,2,3)\n",
      "True\n",
      "inside(-1,-1,0,0,2,3)\n",
      "False\n",
      "point (1,1) lies in both of the rectangles (0.3,0.5,1.1,0.7) and (0.5,0.2,1.1,2)\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "public bool FindPoint(double x,double y,double x1,double y1,double x2,double y2){\n",
    "    if (x > x1 && x < x2 && y > y1 && y < y2) \n",
    "        return true; \n",
    "    return false; \n",
    "} \n",
    "\n",
    "// 5a\n",
    "Console.WriteLine($\"inside(1,1,0,0,2,3)\");\n",
    "Console.WriteLine($\"{FindPoint(1,1,0,0,2,3)}\");\n",
    "\n",
    "Console.WriteLine($\"inside(-1,-1,0,0,2,3)\");\n",
    "Console.WriteLine($\"{FindPoint(-1,-1,0,0,2,3)}\");\n",
    "\n",
    "// 5b\n",
    "Console.WriteLine($\"point (1,1) lies in both of the rectangles (0.3,0.5,1.1,0.7) and (0.5,0.2,1.1,2)\");\n",
    "Console.WriteLine($\"{FindPoint(1,1,0.3,0.5,1.1,0.7) && FindPoint(1,1,0.5,0.2,1.1,2)}\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95123dcb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".NET (C#)",
   "language": "C#",
   "name": ".net-csharp"
  },
  "language_info": {
   "file_extension": ".cs",
   "mimetype": "text/x-csharp",
   "name": "C#",
   "pygments_lexer": "csharp",
   "version": "8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
